{% extends 'base.html.twig' %}

{% block titrePage %}{{ titre }}{% endblock %}

{% block statistiques %}active{% endblock %}

{% block stylesheets %}
    <style>
        .card:hover{
            -webkit-box-shadow: -1px 9px 40px -12px rgba(0,0,0,0.75);
            -moz-box-shadow: -1px 9px 40px -12px rgba(0,0,0,0.75);
            box-shadow: -1px 9px 40px -12px rgba(0, 0, 0, 0.75);
        }
    </style>
{% endblock %}

{% block contenu %}
<div class="table-responsive">
    <table align="center" class="table">
        <tbody>
          <tr>
              <th>Évaluations Concernées</th>
              <td>
                  <ul>
                      {% for evaluation in evaluations %}
                          <li>{{ evaluation.nom }} ({{ evaluation.date|date("d/m/Y") }})</li>
                      {% endfor %}
                  </ul>
              </td>
          </tr>
          <tr>
              <th>Groupes sélectionnés</th>
              <td>
                  <ul>
                      {% for groupe in groupes %}
                        <li>{{ groupe.nom }}</li>
                      {% endfor %}
                  </ul>
              </td>
          </tr>
          <tr>
              <th class="intitule"><label >Actions</label></th>
              <td>
                  <a href="#"><i style="font-size: 25px;" data-toggle='tooltip' title="Exporter les statistiques au format PDF" class="icon-file-pdf" onclick="genPDF()"></i></a>
              </td>
          </tr>
        </tbody>
    </table>
</div>
<div class='bouton' align=center>
    <span style="font-size:15px" class="badge badge-info"><i class="icon-attention-circled"></i>Les statistiques ne prennent pas en compte les étudiants démissionaires</span>
</div>

{% for i in 0..stats|length - 3 %}

{% set idGraph = "diagrammeEvolutionResultat" ~ stats[i].nom %}


<div class="card">
    <ul class="list-group list-group-flush">
        <li class="list-group-item text-white" style="background-color:#bdc3c7;">
          {{stats[i].nom}}
          {% for groupe in groupes %}
          {% endfor %}
        </li>
        <li class="list-group-item">
            <div>
                <br>
                <div class="container-fluid">
                    <span style="font-size:15px"><i class="icon-attention-circled"></i>Survolez le graphique pour plus d'informations</span>
                    <br>
                    <canvas id="{{idGraph}}"></canvas>
                </div>
            </div>
        </li>
    </ul>
</div>
<br>
{% endfor %}

{% endblock %}

{% block javascripts %}

<script type="text/javascript">
  var tabColors = [];
{% for i in 0..stats|length - 3 %}
{% for graphCourant in  1..stats[i] %}
{% set idGraph = "diagrammeEvolutionResultat" ~ stats[i].nom %}
{% set nbEtudiantsGroupeCourant = stats[i]["etudiants"]|length %}
for (var i = 0; i < {{nbEtudiantsGroupeCourant}}; i++) {
  tabColors.push(getRandomAndUniqueColor());
}
var diagrammeEvolutionResultat = document.getElementById( "{{ idGraph }}" ).getContext('2d');
var myLineChart = new Chart(diagrammeEvolutionResultat, {
          type: 'line',
          data: {
              labels: [{% for evaluation in evaluations %} '{{evaluation.nom}}', {% endfor %}],
              datasets: [
        {% for etudiant in stats[i]["etudiants"] %}
          {
  					label: '{{etudiant.nomPrenom}}',
  					data: [{% for note in etudiant.notes %} {{note}}, {% endfor %}],
  					borderColor: tabColors[{{loop.index}}],
  					backgroundColor: tabColors[{{loop.index}}],
  					fill: false,
  					lineTension: 0
  				},
        {% endfor %}

        ]
    				},
          options: {
            scales: {
              xAxes: [{
                display: true,
                scaleLabel: {
                  display: true
                }
              }],
              yAxes: [{
                display: true,
                scaleLabel: {
                  display: false,
                  labelString: 'Value'
                },
                ticks: {
                    suggestedMin: 0,
                    suggestedMax: 20
                }
              }]
            },
            legend: {
            display: true
        }
          },
      });


  function getRandomAndUniqueColor()
  {
    var min = 0;
    var max = 255;
    var red = Math.random() * (max - min) + min;
    var green = Math.random() * (max - min) + min;
    var blue = Math.random() * (max - min) + min;
    var string = "rgba("+red.toString()+", "+green.toString()+", "+blue.toString()+")"
  return string;
  }

{% endfor %}
{% endfor %}

</script>

{% endblock %}
