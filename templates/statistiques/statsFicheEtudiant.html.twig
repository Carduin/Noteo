{% extends 'base.html.twig' %}

{% block titrePage %}{{ titre }}{% endblock %}

{% block statistiques %}active{% endblock %}

{% block stylesheets %}
    <style>
        .card:hover {
            -webkit-box-shadow: -1px 9px 40px -12px rgba(0, 0, 0, 0.75);
            -moz-box-shadow: -1px 9px 40px -12px rgba(0, 0, 0, 0.75);
            box-shadow: -1px 9px 40px -12px rgba(0, 0, 0, 0.75);
        }
    </style>
{% endblock %}

{% block contenu %}
    <div class="table-responsive">
        <table align="center" class="table">
            <tbody>
            <tr>
                <th>Nom</th>
                <td>{{ etudiant.nom }}</td>
            </tr>
            <tr>
                <th>Prénom</th>
                <td>{{ etudiant.prenom }}</td>
            </tr>
            <tr>
                <th>Mail</th>
                <td>{{ etudiant.mail }}</td>
            </tr>
            {% if etudiant.groupes is not empty %}
                <tr>
                    <th>Groupes</th>
                    <td>
                        <ul>
                            {% for groupe in etudiant.groupes if groupe.estEvaluable %}
                                <li>{{ groupe.nom }}</li>
                            {% endfor %}
                        </ul>
                    </td>
                </tr>
            {% endif %}
            {% if etudiant.statuts is not empty %}
                <tr>
                    <th>Statuts</th>
                    <td>
                        <ul>
                            {% for statut in etudiant.statuts %}
                                <li>{{ statut.nom }}</li>
                            {% endfor %}
                        </ul>
                    </td>
                </tr>
            {% endif %}
            </tbody>
        </table>
    </div>
    <div class='bouton' align=center>
        <span style="font-size:15px" class="badge badge-pill badge-primary"><i class="icon-attention-circled"></i> Les statistiques ne prennent pas en compte les évaluations auxquelles l'étudiant était absent et excusé</span>
    </div>
    {% if evaluations|length > 1 %}
        <h1 class="h4 mb-0 text-gray-800">Historique des notes</h1><br>
        <div class="container-fluid">
            <span style="font-size:15px"><i class="icon-attention-circled"></i>Survolez le graphique pour plus d'informations, cliquez sur un point du graphique pour afficher plus de détail</span>
            <canvas align=center id="graphLine"></canvas>
        </div>
    {% endif %}
    <br><h1 class="h4 mb-0 text-gray-800">Classement par rapport aux groupes/statuts</h1><br>
    {% set nbCard = 0 %}
    {% for evaluation in evaluations %}
    {% if stats[nbCard]['noteEtudiant'] != -1 %} <!-- Si l'étudiant n'était pas absent -->
        <div class="card">
            <ul class="list-group list-group-flush">
                <li class="list-group-item text-white" style="background-color:#bdc3c7;" id="date_{{ loop.index }}">
                    {{ evaluation.nom }} ({{ evaluation.date|date("d/m/Y") }})
                </li>
                <li class="card-deck">
                    {% set nbLoop = 0 %}
                    {% for groupe in groupesEtStatuts %}
                    {% if nbLoop > 0 and nbLoop is divisible by(3) %}
                </li>
                <br>
                <li class="card-deck">
                    {% endif %}
                    {% if groupe.estEvaluable is defined %}
                        {% if groupe.estEvaluable %}
                            <div class="card shadow-none p-4 mb-4 bg-light">
                                <div class="card-body">
                                    <h5 class="card-title">{{ groupe.nom }}</h5>
                                    <p class="card-text">
                                    <ul>
                                        <li{% if loop.first %} id="{{ loop.parent.loop.index }}" {% endif %}>Classement : {{ stats[nbCard]['position'] }}</li>
                                        <li id="moyGpe_{{ evaluation.nom }}_{{ groupe.nom }}">Moyenne du groupe
                                            : {{ stats[nbCard]['moyenneGroupe'] }}</li>
                                        <li id="noteEtu_{{ evaluation.nom }}_{{ groupe.nom }}">Note de l'étudiant
                                            : {{ stats[nbCard]['noteEtudiant'] }}</li>
                                    </ul>
                                    </p>
                                </div>
                            </div>
                            <div class="container-fluid">
                                <br><span style="font-size:15px"><i class="icon-attention-circled"></i>Survolez le graphique pour plus d'informations</span><br>
                                <canvas align=center id="graphBar_{{ evaluation.nom }}_{{ groupe.nom }}"
                                        aria-label="Hello ARIA World" role="img"></canvas>
                            </div>
                            {% set nbCard = nbCard + 1 %}
                        {% endif %}
                    {% else %}
                        <div class="card shadow-none p-4 mb-4 bg-light">
                            <div class="card-body">
                                <h5 class="card-title">{{ groupe.nom }}</h5>
                                <p class="card-text">
                                <ul>
                                    <li{% if loop.first %} id="{{ loop.parent.loop.index }}" {% endif %}>Classement : {{ stats[nbCard]['position'] }}</li>
                                    <li id="moyGpe_{{ evaluation.nom }}_{{ groupe.nom }}">Moyenne du groupe
                                        : {{ stats[nbCard]['moyenneGroupe'] }}</li>
                                    <li id="noteEtu_{{ evaluation.nom }}_{{ groupe.nom }}">Note de l'étudiant
                                        : {{ stats[nbCard]['noteEtudiant'] }}</li>
                                </ul>
                                </p>
                            </div>
                        </div>
                        <div class="container-fluid">
                            <br><span style="font-size:15px"><i class="icon-attention-circled"></i>Survolez le graphique pour plus d'informations</span><br>
                            <canvas align=center id="graphBar_{{ evaluation.nom }}_{{ groupe.nom }}"
                                    aria-label="Hello ARIA World" role="img"></canvas>
                        </div>
                        <br>
                        {% set nbCard = nbCard + 1 %}
                    {% endif %}
                    {% endfor %}
                </li>
            </ul>
        </div>
        <br>
        {% set nbLoop = nbLoop + 1 %}
    {% endif %}
    {% endfor %}
    <br>
{% endblock %}

{% block javascripts %}
    <!-- Script pour la génération des graphiques -->
    <script type="text/javascript">
        var fontSize = 16;
        var noir = "#000000", jaune = "#FFFF00", bleu = "#0000FF", rouge = "#FF0000", vert = "#00FF00",
            violet = "#EE82EE", blanc = "#FFFFFF", gris = "#808080";
        // Pallette de couleurs (valeurs rgb)
        var couleurs = [
            [192, 57, 43],
            [155, 89, 182],
            [41, 128, 185],
            [22, 160, 133],
            [46, 204, 113],
            [243, 156, 18],
            [211, 84, 0],
            [189, 195, 199],
            [127, 140, 141],
            [44, 62, 80],
            [231, 76, 60],
            [142, 68, 173],
            [26, 188, 156],
            [39, 174, 96],
            [241, 196, 15],
            [230, 126, 34],
            [236, 240, 241],
            [149, 165, 166],
            [52, 73, 94],
        ];
        var chartDATA = {
            labels: [],
            datasets: undefined,
        };
        //Contiendra les variables des graphiques pour les mettre à jour
        var graphiques = [];
        // Objet options du graphique
        var options = {
            scales: {
                xAxes: [{
                    gridLines: {
                        display: false
                    },
                    ticks: {
                        fontSize: fontSize,
                    },
                    maxBarThickness: 100,
                    stacked: false,
                }],
                yAxes: [{
                    labelString: 'Intervalle de note',
                    ticks: {
                        beginAtZero: true,
                        max: 20,
                        min: 0,
                        fontSize: fontSize,
                    },
                    stacked: false,
                }],
            },
            legend: {
                position: 'top',
                labels: {
                    fontSize: fontSize,
                },
            },
            aspectRatio: 3,
            maintainAspectRatio: true,
            responsive: true,
            tooltips: {
                intersect: false,
                titleMarginBottom: 10,
                titleFontColor: '#6e707e',
                titleFontSize: fontSize,
                backgroundColor: blanc,
                bodyFontColor: "#858796",
                borderColor: '#dddfeb',
                borderWidth: 1,
                xPadding: 15,
                yPadding: 15,
                displayColors: true,
                caretPadding: 10
            },
            plugins: {
                labels: {
                    render: 'value'
                }
            }
        }
        {% if evaluations|length > 1 %}
            var nomEvals = [];
            var notesEtu = [];
            var classements = [];
            var dates = [];
            {% for evaluation in evaluations %}
                {% set passageEvalSuivante = groupesEtStatuts|length * loop.index %}
                {% set noteEtu = stats[passageEvalSuivante - 1]['noteEtudiant'] %}
                {% set classement = stats[passageEvalSuivante - 1]['position'] %}
                {% if noteEtu != -1 %} // Si l'étudiant n'était pas absent
                    var nomEval = {{ evaluation.nom|json_encode|raw }};
                    nomEvals.push(nomEval);
                    notesEtu.push({{ noteEtu }});
                    classements.push({{ classement }});
                    dates.push({{ evaluation.date|date("d/m/Y") }});
                {% endif %}
            {% endfor %}
            var chartLine = new Chart(document.getElementById("graphLine").getContext('2d'), {
                type: 'line',
                data: {
                    labels: nomEvals,
                    datasets: [{
                        data: notesEtu,
                        label: 'Notes de l\'étudiant',
                        lineTension: 0,
                        borderColor: "#0275d8",
                        fill: false
                    }]
                },
                options: options
            });
            chartLine.options = {
                scales: { // Retire les labels sur l'axe des abscisses
                    xAxes: [{
                        ticks: {
                            display: false
                        }
                    }]
                },
                tooltips: {
                    enabled: true,
                    mode: 'single',
                    callbacks: {
                        label: function (tooltipItems, data) { // Tooltip custom pour avoir la note, le classement et la date de l'évaluation
                            var multistringText = ['Note de l\'etudiant : ' + tooltipItems.yLabel]; // Note de l'étudiant
                            var index = tooltipItems.index + 1;
                            multistringText.push(document.getElementById(index).innerHTML); // Classement
                            var str = document.getElementById("date_" + index).innerHTML
                            multistringText.push("Date de l\'évaluaton : " + str.substring(str.lastIndexOf("(") + 1, str.lastIndexOf(")"))); // Date de l'évaluation
                            return multistringText;
                        }
                    }
                }
            };
            chartLine.update();
            // Redirection vers la carte correspondante en fonction du clic
            $("#graphLine").click(
                function (evt) {
                    var points = chartLine.getElementsAtEvent(evt);
                    var index = parseInt(points[0]["_index"]) + 1;
                    var id = "#date_" + index;
                    $('html, body').animate({scrollTop: $(id).offset().top}, 'slow');
                });
        {% endif %}
        {% for evaluation in evaluations %}
            {% for groupe in groupesEtStatuts %}
                {% set passageEvalSuivante = groupesEtStatuts|length - 1 * loop.parent.loop.index %}
                {% if groupe.estEvaluable is defined %}
                    {% if groupe.estEvaluable != false %}
                    var noteEtu = document.getElementById("noteEtu_{{ evaluation.nom }}_{{ groupe.nom }}").innerHTML.split(': ')[1]
                    var noteGpe = document.getElementById("moyGpe_{{ evaluation.nom }}_{{ groupe.nom }}").innerHTML.split(': ')[1]
                    var notes = [noteEtu, noteGpe]
                    var chartBar = new Chart(document.getElementById("graphBar_{{ evaluation.nom }}_{{ groupe.nom }}").getContext('2d'), {
                        type: 'bar',
                        data: {
                            labels: ['Note de l\'étudiant', 'Moyenne du groupe'],
                            datasets: [{
                                label: 'Moyenne sur l\'évaluation',
                                backgroundColor: "#0275d8",
                                data: notes
                            }]
                        },
                        options: options,
                    });
                    chartBar.update();
                    {% endif %}
                {% else %}
                    var noteEtu = document.getElementById("noteEtu_{{ evaluation.nom }}_{{ groupe.nom }}").innerHTML.split(': ')[1]
                    var noteGpe = document.getElementById("moyGpe_{{ evaluation.nom }}_{{ groupe.nom }}").innerHTML.split(': ')[1]
                    var notes = [noteEtu, noteGpe]
                    var chartBar = new Chart(document.getElementById("graphBar_{{ evaluation.nom }}_{{ groupe.nom }}").getContext('2d'), {
                        type: 'bar',
                        data: {
                            labels: ['Note de l\'étudiant', 'Moyenne du groupe'],
                            datasets: [{
                                label: 'Moyenne sur l\'évaluation',
                                backgroundColor: "#0275d8",
                                data: notes
                            }]
                        },
                        options: options,
                    });
                    chartBar.update();
                {% endif %}
            {% endfor %}
        {% endfor %}
    </script>
{% endblock %}



